{
  "version": 3,
  "sources": ["dist/reactome-cytoscape-style/index.scss", "node_modules/@angular/material/core/style/_sass-utils.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss", "node_modules/@angular/material/core/typography/_typography.scss", "node_modules/@angular/material/core/typography/_typography-utils.scss", "node_modules/@angular/material/chips/_chips-theme.scss", "node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss", "node_modules/@angular/material/list/_list-theme.scss", "node_modules/@angular/material/tabs/_tabs-theme.scss", "node_modules/@angular/material/core/ripple/_ripple.scss", "node_modules/@angular/cdk/a11y/_index.scss", "node_modules/@angular/cdk/overlay/_index.scss", "node_modules/@angular/cdk/text-field/_index.scss", "node_modules/@angular/material/core/focus-indicators/_private.scss", "node_modules/@angular/material/core/style/_layout-common.scss", "node_modules/@angular/material/core/_core.scss", "node_modules/@angular/material/core/_core-theme.scss", "node_modules/@angular/material/core/option/_option-theme.scss", "node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss", "node_modules/@angular/material/progress-bar/_progress-bar-theme.scss", "node_modules/@angular/material/form-field/_form-field-theme.scss", "node_modules/@angular/material/select/_select-theme.scss", "node_modules/@angular/material/checkbox/_checkbox-theme.scss", "node_modules/@angular/material/button/_button-theme.scss", "node_modules/@angular/material/button/_icon-button-theme.scss", "node_modules/@angular/material/button/_fab-theme.scss", "node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss", "node_modules/@angular/material/icon/_icon-theme.scss", "node_modules/@angular/material/stepper/_stepper-theme.scss", "node_modules/ngx-reactome-style/_index.scss", "node_modules/@angular/material/radio/_radio-theme.scss", "node_modules/@angular/material/slider/_slider-theme.scss", "node_modules/@angular/material/badge/_badge-theme.scss", "node_modules/@angular/material/datepicker/_datepicker-theme.scss", "node_modules/@angular/material/toolbar/_toolbar-theme.scss", "node_modules/ngx-reactome-style/_variables.scss", "src/styles.scss"],
  "sourcesContent": [".loading {\n  background-size: auto 100% !important;\n  background: url(loader.gif) no-repeat center;\n}\n\n.video {\n  filter: brightness(1.2);\n}\n\n.dark {\n  .video {\n    filter: brightness(1);\n  }\n  .molecule {\n    filter: invert(1) hue-rotate(180deg);\n  }\n}\n", "@use 'sass:color';\n@use 'sass:string';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Whether our theming API is using --sys- variables for color tokens.\n$use-system-color-variables: false;\n\n/// Whether our theming API is using --sys- variables for typography tokens.\n$use-system-typography-variables: false;\n\n/// Include content under the current selector (&) or the document root if there is no current\n/// selector.\n/// @param {String} $root [html] The default root selector to use when there is no current selector.\n/// @output The given content under the current selector, or root selector if there is no current\n///     selector.\n/// @content Content to output under the current selector, or root selector if there is no current\n///     selector.\n@mixin current-selector-or-root($root: html) {\n  @if & {\n    @content;\n  }\n  @else {\n    #{$root} {\n      @content;\n    }\n  }\n}\n\n/// A version of the standard `map.merge` function that takes a variable number of arguments.\n/// Each argument is merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.merge\n/// @return {Map} The combined result of successively calling map.merge with each parameter.\n@function merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n\n/// A version of the standard `map.deep-merge` function that takes a variable number of arguments.\n/// Each argument is deep-merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.deep-merge\n/// @return {Map} The combined result of successively calling map.deep-merge with each parameter.\n@function deep-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.deep-merge($result, $map);\n  }\n  @return $result;\n}\n\n/// Coerces the given value to a list, by converting any non-list value into a single-item list.\n/// This should be used when dealing with user-passed lists of args to avoid confusing errors,\n/// since Sass treats `($x)` as equivalent to `$x`.\n/// @param {Any} $value The value to coerce to a list.\n/// @return {List} The original $value if it was a list, otherwise a single-item list containing\n///     $value.\n@function coerce-to-list($value) {\n  @return if(meta.type-of($value) != 'list', ($value,), $value);\n}\n\n/// A version of the Sass `color.change` function that is safe ot use with CSS variables.\n@function safe-color-change($color, $args...) {\n  $args: meta.keywords($args);\n  $use-color-mix: $use-system-color-variables or\n      (is-css-var-name($color) and string.index($color, '--mat') == 1);\n  @if (meta.type-of($color) == 'color') {\n    @return color.change($color, $args...);\n  }\n  @else if ($color != null and\n      map.get($args, alpha) != null and $use-color-mix) {\n    $opacity: map.get($args, alpha);\n    @if meta.type-of($opacity) == number {\n      $opacity: ($opacity * 100) + '%';\n    }\n\n    @if (is-css-var-name($opacity)) {\n      $opacity: calc(var($opacity) * 100%);\n    }\n\n    @if (is-css-var-name($color)) {\n      $color: var($color);\n    }\n\n    @return #{color-mix(in srgb, #{$color} #{$opacity}, transparent)};\n  }\n  @return $color;\n}\n\n/// Gets the given arguments as a map of keywords and validates that only supported arguments were\n/// passed.\n/// @param {ArgList} $args The arguments to convert to a keywords map.\n/// @param {List} $supported-args The supported argument names.\n/// @return {Map} The $args as a map of argument name to argument value.\n@function validate-keyword-args($args, $supported-args) {\n  @if list.length($args) > 0 {\n    @error #{'Expected keyword args, but got positional args: '}#{$args};\n  }\n  $kwargs: meta.keywords($args);\n  @each $arg, $v in $kwargs {\n    @if list.index($supported-args, $arg) == null {\n      @error #{'Unsupported argument '}#{$arg}#{'. Valid arguments are: '}#{$supported-args};\n    }\n  }\n  @return $kwargs;\n}\n\n// Returns whether the $value is a CSS variable name based on whether it's a string prefixed\n// by \"--\".\n@function is-css-var-name($value) {\n  @return meta.type-of($value) == string and string.index($value, '--') == 1;\n}\n", "@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n@use '../style/elevation';\n@use '../style/sass-utils';\n@use './m3-tokens';\n\n$_tokens: null;\n$_component-prefix: null;\n$_system-fallbacks: m3-tokens.create-system-fallbacks();\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _create-var-name($prefix, $token) {\n  @if $prefix == null or $token == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$token}');\n}\n\n// Creates a CSS variable, including the fallback if provided.\n@function _create-var($name, $fallback: null) {\n  @if ($fallback) {\n    @return var($name, $fallback);\n  } @else {\n    @return var($name);\n  }\n}\n\n// Gets the value of the token given the current global context state.\n@function _get-token-value($token, $fallback) {\n  $var-name: _create-var-name($_component-prefix, $token);\n  $fallback: _get-token-fallback($token, $fallback);\n  @return _create-var($var-name, $fallback);\n}\n\n// Assertion mixin that throws an error if the global state has not been set up by wrapping\n// calls with `use-tokens`.\n@function _assert-use-tokens($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error 'Function was not called within a wrapping call of `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return true;\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@mixin create-token-slot($property, $token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @if map.get($_tokens, $token) != null {\n    #{$property}: #{_get-token-value($token, $fallback)};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable-name($token) {\n  $_assert: _assert-use-tokens($token);\n  @return _create-var-name($_component-prefix, $token);\n}\n\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n// Accepts an optional fallback parameter to include in the CSS variable.\n// If $fallback is `true`, then use the tokens map to get the fallback.\n// TODO: Remove the use case where we accept \"true\" and handle any failing client screenshots\n@function get-token-variable($token, $fallback: null) {\n  $_assert: _assert-use-tokens($token);\n  @return _get-token-value($token, $fallback);\n}\n\n// Gets the token's fallback value. Prefers adding a system-level fallback if one exists, otherwise\n// use the provided fallback.\n@function _get-token-fallback($token, $fallback: null) {\n  // If the $fallback is `true`, this is the component's signal to use the current token map value\n  @if ($fallback == true) {\n    $fallback: map.get($_tokens, $token);\n  }\n\n  // Check whether there's a system-level fallback. If not, return the optional\n  // provided fallback (otherwise null).\n  $sys-fallback: map.get($_system-fallbacks, $_component-prefix, $token);\n  @if (not $sys-fallback) {\n    @return $fallback;\n  }\n\n  @if (sass-utils.is-css-var-name($sys-fallback)) {\n    @return _create-var($sys-fallback, $fallback);\n  }\n\n  // TODO(mat-app-theme): Return the system-level fallback.\n  // Changing this will affect clients that do not properly call theme mixins since the tokens\n  // will be undefined and now default to M3 system values, causing a number of screenshot failures.\n  // @return $sys-fallback;\n  @return $fallback;\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    @each $key, $value in $tokens {\n      @if $value != null {\n        #{_create-var-name($prefix, $key)}: #{$value};\n      }\n    }\n  }\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge($tokens, (\n    $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n    $shadow-color-token: null,\n  ));\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if($variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $token-maps...) {\n  @include _validate-token-overrides($overrides, $token-maps);\n\n  @each $token-map in $token-maps {\n    $prefix: map.get($token-map, prefix);\n    $tokens: map.get($token-map, tokens);\n\n    @each $name, $value in $tokens {\n      $tokens: map.set($tokens, $name, map.get($overrides, $name));\n    }\n\n    @include sass-utils.current-selector-or-root() {\n      @include create-token-values($prefix, $tokens);\n    }\n  }\n}\n\n/// Verifies that the token overrides exist and are used in one of the given token maps.\n@mixin _validate-token-overrides($overrides: (), $token-maps) {\n  $valid-token-names: ();\n\n  @each $token-map in $token-maps {\n    @each $name, $value in map.get($token-map, tokens) {\n      @if ($value != null and list.index($valid-token-names, $name) == null) {\n        $valid-token-names: list.append($valid-token-names, $name);\n      }\n    }\n  }\n\n  @each $name in map.keys($overrides) {\n    @if (list.index($valid-token-names, $name) == null) {\n      @error (\n        'Invalid token: \"' + $name + '\"'\n        'Valid tokens include: ' $valid-token-names\n      );\n    }\n  }\n}\n", "@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n@use 'typography-utils';\n@use '../theming/inspection';\n\n// Definition and versioning functions live in their own files to avoid circular dependencies, but\n// we re-export them here so that historical imports from this file continue to work without needing\n// to be updated.\n@forward './versioning';\n\n@mixin typography-hierarchy($theme, $selector: '.mat-typography', $back-compat: false) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _m3-typography-hierarchy($theme, $selector, $back-compat);\n  }\n  @else {\n    @include _m2-typography-hierarchy($theme, $selector);\n  }\n}\n\n@function _get-selector($selectors, $prefix) {\n  $result: ();\n  @each $selector in $selectors {\n    // Don't add \"naked\" tag selectors, and don't nest prefix selector.\n    @if string.index($selector, '.') == 1 {\n      $result: list.append($result, $selector, $separator: comma);\n    }\n    // Don't nest the prefix selector in itself.\n    @if $selector != $prefix {\n      $result: list.append($result, '#{$prefix} #{$selector}', $separator: comma);\n    }\n  }\n  @return $result;\n}\n\n@mixin _m3-typography-level($theme, $selector-prefix, $level, $selectors, $margin: null) {\n  #{_get-selector($selectors, $selector-prefix)} {\n    // TODO(mmalerba): When we expose system tokens as CSS vars, we should change this to emit token\n    //  slots.\n    font: inspection.get-theme-typography($theme, $level, font);\n    letter-spacing: inspection.get-theme-typography($theme, $level, letter-spacing);\n    @if $margin != null {\n      margin: 0 0 $margin;\n    }\n  }\n}\n\n@mixin _m3-typography-hierarchy($theme, $selector-prefix, $add-m2-selectors) {\n $levels: (\n   display-large: (\n     selectors: ('.mat-display-large', 'h1'),\n     m2-selectors: ('.mat-h1', '.mat-headline-1'),\n     margin: 0.5em\n   ),\n   display-medium: (\n     selectors: ('.mat-display-medium', 'h2'),\n     m2-selectors: ('.mat-h2', '.mat-headline-2'),\n     margin: 0.5em\n   ),\n   display-small: (\n     selectors: ('.mat-display-small', 'h3'),\n     m2-selectors: ('.mat-h3', '.mat-headline-3'),\n     margin: 0.5em\n   ),\n   headline-large: (\n     selectors: ('.mat-headline-large', 'h4'),\n     m2-selectors: ('.mat-h4', '.mat-headline-4'),\n     margin: 0.5em\n   ),\n   headline-medium: (\n     selectors: ('.mat-headline-medium', 'h5'),\n     m2-selectors: ('.mat-h5', '.mat-headline-5'),\n     margin: 0.5em\n   ),\n   headline-small: (\n     selectors: ('.mat-headline-small', 'h6'),\n     m2-selectors: ('.mat-h6', '.mat-headline-6'),\n     margin: 0.5em\n   ),\n   title-large: (\n     selectors: ('.mat-title-large'),\n     m2-selectors: ('.mat-subtitle-1'),\n   ),\n   title-medium: (\n     selectors: ('.mat-title-medium'),\n     m2-selectors: ('.mat-subtitle-2'),\n   ),\n   title-small: (\n     selectors: ('.mat-title-small')\n   ),\n   body-large: (\n     selectors: ('.mat-body-large', $selector-prefix),\n     m2-selectors: ('.mat-body', '.mat-body-strong', '.mat-body-2'),\n   ),\n   body-medium: (\n     selectors: ('.mat-body-medium')\n   ),\n   body-small: (\n     selectors: ('.mat-body-small')\n   ),\n   label-large: (\n     selectors: ('.mat-label-large')\n   ),\n   label-medium: (\n     selectors: ('.mat-label-medium')\n   ),\n   label-small: (\n     selectors: ('.mat-label-small'),\n     m2-selectors: ('.mat-small', '.mat-caption')\n   ),\n );\n\n  @each $level, $options in $levels {\n    @if $add-m2-selectors {\n      $options: map.set($options, selectors,\n          list.join(map.get($options, selectors), map.get($options, m2-selectors) or ()));\n    }\n    $options: map.remove($options, m2-selectors);\n\n    // Apply styles for the level.\n    @include _m3-typography-level($theme, $selector-prefix, $level, $options...);\n\n    // Also style <p> inside body-large.\n    @if $level == body-large {\n      #{_get-selector(map.get($options, selectors), $selector-prefix)} {\n        p {\n          margin: 0 0 0.75em;\n        }\n      }\n    }\n  }\n}\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin _m2-typography-hierarchy($theme, $selector) {\n  // Note that it seems redundant to prefix the class rules with the `$selector`, however it's\n  // necessary if we want to allow people to overwrite the tag selectors. This is due to\n  // selectors like `#{$selector} h1` being more specific than ones like `.mat-title`.\n  .mat-h1,\n  .mat-headline-5,\n  #{$selector} .mat-h1,\n  #{$selector} .mat-headline-5,\n  #{$selector} h1 {\n    font: inspection.get-theme-typography($theme, headline-5, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-5, letter-spacing);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2,\n  .mat-headline-6,\n  #{$selector} .mat-h2,\n  #{$selector} .mat-headline-6,\n  #{$selector} h2 {\n    font: inspection.get-theme-typography($theme, headline-6, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-6, letter-spacing);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3,\n  .mat-subtitle-1,\n  #{$selector} .mat-h3,\n  #{$selector} .mat-subtitle-1,\n  #{$selector} h3 {\n    font: inspection.get-theme-typography($theme, subtitle-1, font);\n    letter-spacing: inspection.get-theme-typography($theme, subtitle-1, letter-spacing);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4,\n  .mat-body-1,\n  #{$selector} .mat-h4,\n  #{$selector} .mat-body-1,\n  #{$selector} h4 {\n    font: inspection.get-theme-typography($theme, body-1, font);\n    letter-spacing: inspection.get-theme-typography($theme, body-1, letter-spacing);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5,\n  #{$selector} .mat-h5,\n  #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{inspection.get-theme-typography($theme, body-2, font-size)} * 0.83),\n      inspection.get-theme-typography($theme, body-2, font-weight),\n      inspection.get-theme-typography($theme, body-2, line-height),\n      inspection.get-theme-typography($theme, body-2, font-family)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6,\n  #{$selector} .mat-h6,\n  #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{inspection.get-theme-typography($theme, body-2, font-size)} * 0.67),\n      inspection.get-theme-typography($theme, body-2, font-weight),\n      inspection.get-theme-typography($theme, body-2, line-height),\n      inspection.get-theme-typography($theme, body-2, font-family)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong,\n  .mat-subtitle-2,\n  #{$selector} .mat-body-strong,\n  #{$selector} .mat-subtitle-2 {\n    font: inspection.get-theme-typography($theme, subtitle-2, font);\n    letter-spacing: inspection.get-theme-typography($theme, subtitle-2, letter-spacing);\n  }\n\n  .mat-body,\n  .mat-body-2,\n  #{$selector} .mat-body,\n  #{$selector} .mat-body-2,\n  #{$selector} {\n    font: inspection.get-theme-typography($theme, body-2, font);\n    letter-spacing: inspection.get-theme-typography($theme, body-2, letter-spacing);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small,\n  .mat-caption,\n  #{$selector} .mat-small,\n  #{$selector} .mat-caption {\n    font: inspection.get-theme-typography($theme, caption, font);\n    letter-spacing: inspection.get-theme-typography($theme, caption, letter-spacing);\n  }\n\n  .mat-headline-1,\n  #{$selector} .mat-headline-1 {\n    font: inspection.get-theme-typography($theme, headline-1, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-1, letter-spacing);\n    margin: 0 0 56px;\n  }\n\n  .mat-headline-2,\n  #{$selector} .mat-headline-2 {\n    font: inspection.get-theme-typography($theme, headline-2, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-2, letter-spacing);\n    margin: 0 0 64px;\n  }\n\n  .mat-headline-3,\n  #{$selector} .mat-headline-3 {\n    font: inspection.get-theme-typography($theme, headline-3, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-3, letter-spacing);\n    margin: 0 0 64px;\n  }\n\n  .mat-headline-4,\n  #{$selector} .mat-headline-4 {\n    font: inspection.get-theme-typography($theme, headline-4, font);\n    letter-spacing: inspection.get-theme-typography($theme, headline-4, letter-spacing);\n    margin: 0 0 64px;\n  }\n}\n", "@use 'sass:list';\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes.\n    font: $font-weight list.slash($font-size, $line-height) $font-family;\n  }\n}\n", "@use 'sass:color';\n@use '../core/tokens/m2/mdc/chip' as tokens-mdc-chip;\n@use '../core/tokens/m2/mat/chip' as tokens-mat-chip;\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-chips.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme));\n\n      &.mat-mdc-chip-selected,\n      &.mat-mdc-chip-highlighted {\n        &.mat-primary {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, primary));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, primary));\n        }\n\n        &.mat-accent {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, accent));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, warn));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-chip.mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-chip.$prefix, tokens: tokens-mdc-chip.get-token-slots()),\n    (prefix: tokens-mat-chip.$prefix, tokens: tokens-mat-chip.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-chip.$prefix, $options...);\n  $mat-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mat-chip.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-chip.$prefix, $mdc-chip-tokens);\n  @include token-utils.create-token-values(tokens-mat-chip.$prefix, $mat-chip-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/switch' as tokens-mat-switch;\n@use '../core/tokens/m2/mdc/switch' as tokens-mdc-switch;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-unthemable-tokens());\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-unthemable-tokens());\n      }\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    $mdc-tokens: tokens-mdc-switch.get-color-tokens($theme);\n\n    // Add values for MDC slide toggles tokens\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-color-tokens($theme));\n\n      // TODO(wagnermaciel): Use our token system to define this css variable.\n      --mdc-switch-disabled-label-text-color: #{inspection.get-theme-color(\n          $theme,\n          foreground,\n          disabled-text\n        )};\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-color-tokens($theme));\n\n        // Change the color palette related tokens to accent or warn if applicable\n        &.mat-accent {\n          @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n            tokens-mdc-switch.private-get-color-palette-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n            tokens-mdc-switch.private-get-color-palette-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-typography-tokens($theme));\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-typography-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-density-tokens($theme));\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-density-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mat-switch.$prefix,\n      tokens: tokens-mat-switch.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mdc-switch.$prefix,\n      tokens: tokens-mdc-switch.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-switch.$prefix, $options...);\n  // Don't pass $options here, since the mat-switch doesn't support color options,\n  // only the mdc-switch does.\n  $mat-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mat-switch.$prefix);\n\n  @include token-utils.create-token-values(tokens-mdc-switch.$prefix, $mdc-switch-tokens);\n  @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-switch-tokens);\n}\n", "@use 'sass:map';\n\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/list' as tokens-mat-list;\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mdc/list' as tokens-mdc-list;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n@mixin base($theme) {\n  // Add default values for tokens not related to color, typography, or density.\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-color-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include token-utils.create-token-values(\n        tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, primary));\n    }\n\n    .mat-accent {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include token-utils.create-token-values(\n          tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, accent));\n      }\n    }\n\n    .mat-warn {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include token-utils.create-token-values(\n          tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, warn));\n      }\n    }\n\n    .mat-mdc-list-option {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, primary));\n    }\n    .mat-mdc-list-option.mat-accent {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, accent));\n    }\n    .mat-mdc-list-option.mat-warn {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, warn));\n    }\n\n    // There is no token for activated color on nav list.\n    // TODO(mmalerba): Add a token to MDC or make a custom one.\n    .mat-mdc-list-base.mat-mdc-list-base {\n      .mdc-list-item--selected,\n      .mdc-list-item--activated {\n        .mdc-list-item__primary-text,\n        .mdc-list-item__start {\n          color: inspection.get-theme-color($theme, primary);\n        }\n      }\n    }\n\n    // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can\n    //  cause opacity issues, so we need this override for now. We can remove it when all\n    //  Angular Material components stop using the old MDC mixins.\n    .mat-mdc-list-base .mdc-list-item--disabled {\n      .mdc-list-item__start,\n      .mdc-list-item__content,\n      .mdc-list-item__end {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-density-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include token-utils.create-token-values(\n        tokens-mdc-radio.$prefix, tokens-mdc-radio.get-density-tokens($theme));\n    }\n\n    // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based\n    //  API, to avoid screenshot diffs. We should remove it in favor of following MDC's current\n    //  style, or add custom tokens for it.\n    .mat-mdc-list-item {\n      &.mdc-list-item--with-leading-avatar,\n      &.mdc-list-item--with-leading-checkbox,\n      &.mdc-list-item--with-leading-icon {\n        &.mdc-list-item--with-one-line {\n          height: map.get((\n            0: 56px,\n            -1: 52px,\n            -2: 48px,\n            -3: 44px,\n            -4: 40px,\n            -5: 40px,\n          ), $density-scale);\n        }\n\n        &.mdc-list-item--with-two-lines {\n          height: map.get((\n            0: 72px,\n            -1: 68px,\n            -2: 64px,\n            -3: 60px,\n            -4: 56px,\n            -5: 56px,\n          ), $density-scale);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-typography-tokens($theme));\n    }\n\n    // MDC does not have tokens for the subheader.\n    // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.\n    .mdc-list-group__subheader {\n      font: inspection.get-theme-typography($theme, subtitle-1, font);\n      letter-spacing: inspection.get-theme-typography($theme, subtitle-1, letter-spacing);\n    }\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-list.$prefix, tokens: tokens-mat-list.get-token-slots()),\n    (prefix: tokens-mdc-list.$prefix, tokens: tokens-mdc-list.get-token-slots()),\n  );\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-list-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-list.$prefix);\n  $mat-list-tokens: token-utils.get-tokens-for($tokens, tokens-mat-list.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-list.$prefix, $mdc-list-tokens);\n  @include token-utils.create-token-values(tokens-mat-list.$prefix, $mat-list-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/tokens/m2/mdc/secondary-navigation-tab' as tokens-mdc-secondary-navigation-tab;\n@use '../core/tokens/m2/mdc/tab-indicator' as tokens-mdc-tab-indicator;\n@use '../core/tokens/m2/mat/tab-header' as tokens-mat-tab-header;\n@use '../core/tokens/m2/mat/tab-header-with-background' as tokens-mat-tab-header-with-background;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-tab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-tab-header.$prefix, tokens-mat-tab-header.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n\n      &.mat-background-primary {\n        @include _background-styles($theme, primary);\n      }\n\n      &.mat-background-accent {\n        @include _background-styles($theme, accent);\n      }\n\n      &.mat-background-warn {\n        @include _background-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin _background-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n    tokens-mat-tab-header-with-background.get-color-tokens($theme, $palette-name));\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mdc-secondary-navigation-tab.$prefix,\n    tokens-mdc-secondary-navigation-tab.get-color-tokens($theme, $palette-name)\n  );\n  @include token-utils.create-token-values(\n    tokens-mdc-tab-indicator.$prefix,\n    tokens-mdc-tab-indicator.get-color-tokens($theme, $palette-name));\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n   tokens-mat-tab-header.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs typography theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $tab-tokens: tokens-mdc-secondary-navigation-tab.get-token-slots();\n  $tab-indicator-tokens: tokens-mdc-tab-indicator.get-token-slots();\n  $tab-header-tokens: tokens-mat-tab-header.get-token-slots();\n  $tab-header-with-background-tokens: tokens-mat-tab-header-with-background.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-secondary-navigation-tab.$prefix, tokens: $tab-tokens),\n    (prefix: tokens-mdc-tab-indicator.$prefix, tokens: $tab-indicator-tokens),\n    (prefix: tokens-mat-tab-header.$prefix, tokens: $tab-header-tokens),\n    (\n      prefix: tokens-mat-tab-header-with-background.$prefix,\n      tokens: $tab-header-with-background-tokens,\n    ),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-tab-indicator-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-tab-indicator.$prefix, $options...);\n  $mat-tab-header-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mat-tab-header.$prefix, $options...);\n  // Don't pass $options here, because the mdc-tab doesn't have color variants,\n  // only the mdc-tab-indicator and mat-tab-header do.\n  $mdc-secondary-navigation-tab-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-secondary-navigation-tab.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-secondary-navigation-tab.$prefix,\n    $mdc-secondary-navigation-tab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-tab-indicator.$prefix,\n    $mdc-tab-indicator-tokens);\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix, $mat-tab-header-tokens);\n}\n", "@use '@angular/cdk';\n@use '../tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use '../tokens/token-utils';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    @include token-utils.use-tokens(\n      tokens-mat-ripple.$prefix, tokens-mat-ripple.get-token-slots()) {\n      // We have to emit a fallback value here, because some internal builds depend on it.\n      background-color: token-utils.get-token-variable(color, $fallback: rgba(#000, 0.1));\n    }\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n\n    // Hide ripples inside cloned drag&drop elements since they won't go away.\n    .cdk-drag-preview &,\n    .cdk-drag-placeholder & {\n      display: none;\n    }\n  }\n}\n", "/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n", "// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n", "// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when a text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n", "@use 'sass:map';\n@use 'sass:meta';\n@use '@angular/cdk';\n@use '../style/layout-common';\n@use '../theming/theming';\n@use '../theming/inspection';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat');\n}\n\n@mixin mdc-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat-mdc');\n}\n\n@mixin strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat');\n  }\n}\n\n@mixin strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles($theme-or-color, 'mat-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n\n@mixin mdc-strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat-mdc');\n  }\n}\n\n@mixin mdc-strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles(\n        $theme-or-color, 'mat-mdc-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include mdc-strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n", "// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n", "@use '@angular/cdk';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/token-utils';\n@use './ripple/ripple';\n@use './style/elevation';\n@use './focus-indicators/private';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core() {\n  @include ripple.ripple();\n  @include cdk.a11y-visually-hidden();\n  @include cdk.overlay();\n  @include cdk.text-field-autosize();\n  @include cdk.text-field-autofill();\n  @include private.structural-styling('mat');\n  @include private.structural-styling('mat-mdc');\n\n  // Wrapper element that provides the theme background when the\n  // user's content isn't inside of a `mat-sidenav-container`.\n  @at-root {\n    // Note: we need to emit fallback values here to avoid errors in internal builds.\n    @include token-utils.use-tokens(tokens-mat-app.$prefix, tokens-mat-app.get-token-slots()) {\n      .mat-app-background {\n        @include token-utils.create-token-slot(background-color, background-color, transparent);\n        @include token-utils.create-token-slot(color, text-color, inherit);\n      }\n\n      // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n      // `mat-elevation-z$z-value` where `$z-value` corresponds to the z-space to which the element\n      // is elevated.\n      @for $z-value from 0 through 24 {\n        $selector: elevation.$prefix + $z-value;\n        // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n        // come with elevation baked in and we don't have a way of removing it.\n        .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n          @include token-utils.create-token-slot(box-shadow, 'elevation-shadow-level-#{$z-value}',\n            none);\n        }\n      }\n    }\n  }\n}\n", "@use './theming/theming';\n@use './theming/inspection';\n@use './theming/validation';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/sass-utils';\n@use './typography/typography';\n@use './tokens/token-utils';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use './tokens/m2/mat/option' as tokens-mat-option;\n@use './tokens/m2/mat/optgroup' as tokens-mat-optgroup;\n@use './tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use './tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n$_has-inserted-loaded-marker: false;\n\n@mixin _theme-loaded-marker {\n  @if not $_has-inserted-loaded-marker {\n    $_has-inserted-loaded-marker: true !global;\n\n    // Marker that is used to determine whether the user has added a theme to their page.\n    // Needs to be generated at the root, because themes may be nested inside classes.\n    @at-root {\n      .mat-theme-loaded-marker {\n        display: none;\n      }\n    }\n  }\n}\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include ripple-theme.base($theme);\n    @include option-theme.base($theme);\n    @include optgroup-theme.base($theme);\n    @include pseudo-checkbox-theme.base($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-unthemable-tokens());\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include ripple-theme.color($theme);\n    @include option-theme.color($theme);\n    @include optgroup-theme.color($theme);\n    @include pseudo-checkbox-theme.color($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-color-tokens($theme));\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include option-theme.typography($theme);\n    @include optgroup-theme.typography($theme);\n    @include pseudo-checkbox-theme.typography($theme);\n    @include ripple-theme.typography($theme);\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include option-theme.density($theme);\n    @include optgroup-theme.density($theme);\n    @include pseudo-checkbox-theme.density($theme);\n    @include ripple-theme.density($theme);\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  $app-tokens: tokens-mat-app.get-token-slots();\n  $ripple-tokens: tokens-mat-ripple.get-token-slots();\n  $option-tokens: tokens-mat-option.get-token-slots();\n  $full-pseudo-checkbox-tokens: tokens-mat-full-pseudo-checkbox.get-token-slots();\n  $minimal-pseudo-checkbox-tokens: tokens-mat-minimal-pseudo-checkbox.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-app.$prefix, tokens: $app-tokens),\n    (prefix: tokens-mat-ripple.$prefix, tokens: $ripple-tokens),\n    (prefix: tokens-mat-option.$prefix, tokens: $option-tokens),\n    (prefix: tokens-mat-full-pseudo-checkbox.$prefix, tokens: $full-pseudo-checkbox-tokens),\n    (prefix: tokens-mat-minimal-pseudo-checkbox.$prefix, tokens: $minimal-pseudo-checkbox-tokens),\n  );\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme, $options...) {\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-app-tokens: token-utils.get-tokens-for($tokens, tokens-mat-app.$prefix, $options...);\n  $mat-ripple-tokens: token-utils.get-tokens-for($tokens, tokens-mat-ripple.$prefix, $options...);\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  $mat-optgroup-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-optgroup.$prefix, $options...);\n  $mat-full-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mat-app.$prefix, $mat-app-tokens);\n  @include token-utils.create-token-values(tokens-mat-ripple.$prefix, $mat-ripple-tokens);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n  @include token-utils.create-token-values(tokens-mat-optgroup.$prefix, $mat-optgroup-tokens);\n  @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n    $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n    $mat-minimal-pseudo-checkbox-tokens);\n}\n", "@use '../tokens/m2/mat/option' as tokens-mat-option;\n@use '../tokens/token-utils';\n@use '../style/sass-utils';\n@use '../theming/theming';\n@use '../theming/inspection';\n@use '../theming/validation';\n@use '../typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-option.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme));\n    }\n\n    .mat-accent {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, accent));\n    }\n\n    .mat-warn {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-option.$prefix, tokens: tokens-mat-option.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n}\n", "@use '../../theming/theming';\n@use '../../theming/inspection';\n@use '../../theming/validation';\n@use '../../style/sass-utils';\n@use '../../tokens/token-utils';\n@use '../../tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use '../../tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n      tokens-mat-full-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n    @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n      tokens-mat-minimal-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-full-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n  @include token-utils.create-token-values(\n      tokens-mat-full-pseudo-checkbox.$prefix, $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-minimal-pseudo-checkbox.$prefix, $mat-minimal-pseudo-checkbox-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $full-pseudo-checkbox-tokens: tokens-mat-full-pseudo-checkbox.get-token-slots();\n  $minimal-pseudo-checkbox-tokens: tokens-mat-minimal-pseudo-checkbox.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-full-pseudo-checkbox.$prefix, tokens: $full-pseudo-checkbox-tokens),\n    (prefix: tokens-mat-minimal-pseudo-checkbox.$prefix, tokens: $minimal-pseudo-checkbox-tokens),\n  );\n}\n\n/// Outputs color theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-primary {\n      @include _palette-styles($theme, primary);\n    }\n\n    // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n    // theme from their parent, rather than implementing their own theming, which is why we\n    // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n    // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n    // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n    @include _palette-styles($theme, accent);\n    .mat-accent {\n      @include _palette-styles($theme, accent);\n    }\n\n    .mat-warn {\n      @include _palette-styles($theme, warn);\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/linear-progress' as tokens-mdc-linear-progress;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-linear-progress.$prefix,\n        tokens-mdc-linear-progress.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mdc-linear-progress.$prefix,\n    tokens-mdc-linear-progress.get-color-tokens($theme, $palette-name)\n  );\n}\n\n/// Outputs color theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-progress-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {}\n\n\n/// Outputs density theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $linear-progress-tokens: tokens-mdc-linear-progress.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-linear-progress.$prefix, tokens: $linear-progress-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $tokens: token-utils.get-tokens-for($tokens, tokens-mdc-linear-progress.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-linear-progress.$prefix, $tokens);\n}\n", "@use '../core/tokens/m2/mdc/filled-text-field' as tokens-mdc-filled-text-field;\n@use '../core/tokens/m2/mdc/outlined-text-field' as tokens-mdc-outlined-text-field;\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-form-field.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n          tokens-mdc-filled-text-field.$prefix,\n          tokens-mdc-filled-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mdc-outlined-text-field.$prefix,\n          tokens-mdc-outlined-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-form-field.$prefix,\n          tokens-mat-form-field.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-color-tokens($theme));\n    }\n\n    .mat-mdc-form-field.mat-accent {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-mdc-form-field.mat-warn {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $filled-text-field-tokens: tokens-mdc-filled-text-field.get-token-slots();\n  $outlined-text-field-tokens: tokens-mdc-outlined-text-field.get-token-slots();\n  $form-field-tokens: tokens-mat-form-field.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-filled-text-field.$prefix, tokens: $filled-text-field-tokens),\n    (prefix: tokens-mdc-outlined-text-field.$prefix, tokens: $outlined-text-field-tokens),\n    (prefix: tokens-mat-form-field.$prefix, tokens: $form-field-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-filled-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-filled-text-field.$prefix, $options...);\n  $mdc-outlined-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-outlined-text-field.$prefix, $options...);\n  $mat-form-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-form-field.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n    $mdc-filled-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n    $mdc-outlined-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-form-field.$prefix, $mat-form-field-tokens);\n}\n", "@use '../core/tokens/m2/mat/select' as tokens-mat-select;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-select.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-select.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($theme));\n\n      .mat-mdc-form-field.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, accent));\n      }\n\n      .mat-mdc-form-field.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-select.$prefix, tokens: tokens-mat-select.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-select-tokens: token-utils.get-tokens-for($tokens, tokens-mat-select.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-select-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mat/checkbox' as tokens-mat-checkbox;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-unthemable-tokens()\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-color-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-color-tokens($theme)\n      );\n    }\n\n    .mat-mdc-checkbox {\n      &.mat-primary {\n        @include token-utils.create-token-values(\n          tokens-mdc-checkbox.$prefix,\n          tokens-mdc-checkbox.get-color-tokens($theme, primary));\n      }\n\n      &.mat-warn {\n        @include token-utils.create-token-values(\n          tokens-mdc-checkbox.$prefix,\n          tokens-mdc-checkbox.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-typography-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-typography-tokens($theme)\n      );\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  $density-scale: inspection.get-theme-density($theme);\n\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-density-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-density-tokens($theme)\n      );\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mat-checkbox.$prefix,\n      tokens: tokens-mat-checkbox.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mdc-checkbox.$prefix,\n      tokens: tokens-mdc-checkbox.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-checkbox-tokens: token-utils.get-tokens-for(\n    $tokens,\n    tokens-mdc-checkbox.$prefix,\n    $options...\n  );\n  // Don't pass $options here, since the mdc-checkbox doesn't support color options,\n  // only the mdc-checkbox does.\n  $mat-checkbox-tokens: token-utils.get-tokens-for($tokens, tokens-mat-checkbox.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-checkbox.$prefix, $mdc-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-checkbox.$prefix, $mat-checkbox-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/filled-button' as tokens-mdc-filled-button;\n@use '../core/tokens/m2/mat/filled-button' as tokens-mat-filled-button;\n@use '../core/tokens/m2/mdc/outlined-button' as tokens-mdc-outlined-button;\n@use '../core/tokens/m2/mat/outlined-button' as tokens-mat-outlined-button;\n@use '../core/tokens/m2/mdc/protected-button' as tokens-mdc-protected-button;\n@use '../core/tokens/m2/mat/protected-button' as tokens-mat-protected-button;\n@use '../core/tokens/m2/mdc/text-button' as tokens-mdc-text-button;\n@use '../core/tokens/m2/mat/text-button' as tokens-mat-text-button;\n@use '../core/style/sass-utils';\n\n@mixin _text-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-text-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-text-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-text-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-tokens);\n}\n\n@mixin _filled-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-filled-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-filled-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-filled-button.$prefix, $mat-tokens);\n}\n\n@mixin _protected-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-protected-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-protected-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-protected-button.$prefix, $mat-tokens);\n}\n\n@mixin _outlined-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-outlined-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-outlined-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix, $mat-tokens);\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-text-button.$prefix, $options...);\n  $mdc-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-protected-button.$prefix, $options...);\n  $mdc-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-filled-button.$prefix, $options...);\n  $mdc-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-outlined-button.$prefix, $options...);\n  $mat-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-text-button.$prefix, $options...);\n  $mat-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-protected-button.$prefix, $options...);\n  $mat-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-filled-button.$prefix, $options...);\n  $mat-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-outlined-button.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mdc-text-button.$prefix, $mdc-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mdc-protected-button.$prefix, $mdc-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mdc-filled-button.$prefix, $mdc-filled-button-tokens);\n  @include token-utils.create-token-values(\n    tokens-mdc-outlined-button.$prefix, $mdc-outlined-button-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-protected-button.$prefix, $mat-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-filled-button.$prefix, $mat-filled-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-outlined-button.$prefix, $mat-outlined-button-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-button.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-unthemable-tokens());\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _text-button-variant($theme, null);\n      @include _filled-button-variant($theme, null);\n      @include _protected-button-variant($theme, null);\n      @include _outlined-button-variant($theme, null);\n    }\n\n    .mat-mdc-button {\n      &.mat-primary {\n        @include _text-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _text-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _text-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-unelevated-button {\n      &.mat-primary {\n        @include _filled-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _filled-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _filled-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-raised-button {\n      &.mat-primary {\n        @include _protected-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _protected-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _protected-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-outlined-button {\n      &.mat-primary {\n        @include _outlined-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _outlined-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _outlined-button-variant($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-typography-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-density-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $mdc-filled-button-tokens: tokens-mdc-filled-button.get-token-slots();\n  $mat-filled-button-tokens: tokens-mat-filled-button.get-token-slots();\n  $mdc-outlined-button-tokens: tokens-mdc-outlined-button.get-token-slots();\n  $mat-outlined-button-tokens: tokens-mat-outlined-button.get-token-slots();\n  $mdc-protected-button-tokens: tokens-mdc-protected-button.get-token-slots();\n  $mat-protected-button-tokens: tokens-mat-protected-button.get-token-slots();\n  $mdc-text-button-tokens: tokens-mdc-text-button.get-token-slots();\n  $mat-text-button-tokens: tokens-mat-text-button.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-filled-button.$prefix, tokens: $mdc-filled-button-tokens),\n    (prefix: tokens-mat-filled-button.$prefix, tokens: $mat-filled-button-tokens),\n    (prefix: tokens-mdc-outlined-button.$prefix, tokens: $mdc-outlined-button-tokens),\n    (prefix: tokens-mat-outlined-button.$prefix, tokens: $mat-outlined-button-tokens),\n    (prefix: tokens-mdc-protected-button.$prefix, tokens: $mdc-protected-button-tokens),\n    (prefix: tokens-mat-protected-button.$prefix, tokens: $mat-protected-button-tokens),\n    (prefix: tokens-mdc-text-button.$prefix, tokens: $mdc-text-button-tokens),\n    (prefix: tokens-mat-text-button.$prefix, tokens: $mat-text-button-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n", "@use 'sass:map';\n@use 'sass:math';\n@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;\n@use '../core/tokens/m2/mat/icon-button' as tokens-mat-icon-button;\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix,\n        tokens-mdc-icon-button.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _icon-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-icon-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-icon-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-icon-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n/// $color-variant: The color variant to use for the button: primary, secondary, tertiary, or error.\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _icon-button-variant($theme, null);\n\n      .mat-mdc-icon-button {\n        &.mat-primary {\n          @include _icon-button-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _icon-button-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _icon-button-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $icon-size: 24px;\n    $density-scale: inspection.get-theme-density($theme);\n    $size-map: (\n      0: 48px,\n      -1: 44px,\n      -2: 40px,\n      -3: 36px,\n      -4: 32px,\n      -5: 28px,\n    );\n    $calculated-size: map.get($size-map, $density-scale);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-density-tokens($theme));\n    }\n\n    // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n    .mat-mdc-icon-button.mat-mdc-button-base {\n      // Match the styles that used to be present. This is necessary for backwards\n      // compat to match the previous implementations selector count (two classes).\n      --mdc-icon-button-state-layer-size: #{$calculated-size};\n\n      // TODO: Switch calculated-size to \"var(--mdc-icon-button-state-layer-size)\"\n      // Currently fails validation because the variable is \"undefined\"\n      // in the sass stack.\n      // TODO: Switch icon-size to \"var(--mdc-icon-button-icon-size)\". Currently\n      // fails validation because the variable is \"undefined\" in the sass stack.\n      width: var(--mdc-icon-button-state-layer-size);\n      height: var(--mdc-icon-button-state-layer-size);\n      padding: math.div($calculated-size - $icon-size, 2);\n    }\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-icon-button.$prefix, tokens: tokens-mdc-icon-button.get-token-slots()),\n    (prefix: tokens-mat-icon-button.$prefix, tokens: tokens-mat-icon-button.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n/// $color-variant: The color variant to use for the button: primary, secondary, tertiary, or error.\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mdc-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-icon-button.$prefix, $options...);\n    $mat-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon-button.$prefix, $options...);\n\n    @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix, $mdc-tokens);\n    @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n  }\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mdc/fab' as tokens-mdc-fab;\n@use '../core/tokens/m2/mdc/fab-small' as tokens-mdc-fab-small;\n@use '../core/tokens/m2/mdc/extended-fab' as tokens-mdc-extended-fab;\n@use '../core/tokens/m2/mat/fab' as tokens-mat-fab;\n@use '../core/tokens/m2/mat/fab-small' as tokens-mat-fab-small;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-fab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-fab.$prefix, tokens-mdc-fab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-fab-small.$prefix, tokens-mdc-fab-small.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-extended-fab.$prefix, tokens-mdc-extended-fab.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _fab-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-fab.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-tokens);\n}\n\n@mixin _fab-small-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab-small.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab-small.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-fab-small.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _fab-variant($theme, null);\n      @include _fab-small-variant($theme, null);\n      @include token-utils.create-token-values(\n        tokens-mdc-extended-fab.$prefix, tokens-mdc-extended-fab.get-color-tokens($theme));\n\n      .mat-mdc-fab {\n        &.mat-primary {\n          @include _fab-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-variant($theme, warn);\n        }\n      }\n\n      .mat-mdc-mini-fab {\n        &.mat-primary {\n          @include _fab-small-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-small-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-small-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-extended-fab.$prefix,\n        tokens-mdc-extended-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-fab.$prefix, tokens: tokens-mdc-fab.get-token-slots()),\n    (prefix: tokens-mdc-fab-small.$prefix, tokens: tokens-mdc-fab-small.get-token-slots()),\n    (prefix: tokens-mdc-extended-fab.$prefix, tokens: tokens-mdc-extended-fab.get-token-slots()),\n    (prefix: tokens-mat-fab.$prefix, tokens: tokens-mat-fab.get-token-slots()),\n    (prefix: tokens-mat-fab-small.$prefix, tokens: tokens-mat-fab-small.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-fab') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-extended-fab-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-extended-fab.$prefix, $options...);\n  $mdc-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab.$prefix, $options...);\n  $mdc-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab-small.$prefix,\n    $options...);\n  $mat-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab.$prefix, $options...);\n  $mat-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab-small.$prefix,\n    $options...);\n    @include token-utils.create-token-values(tokens-mdc-extended-fab.$prefix,\n      $mdc-extended-fab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-fab.$prefix, $mdc-fab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-fab-small.$prefix, $mdc-fab-small-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-fab-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-fab-small-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/circular-progress' as tokens-mdc-circular-progress;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n        tokens-mdc-circular-progress.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n        tokens-mdc-circular-progress.get-color-tokens($theme, primary));\n\n      .mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n          tokens-mdc-circular-progress.get-color-tokens($theme, accent));\n      }\n\n      .mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n          tokens-mdc-circular-progress.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $circular-progress-tokens: tokens-mdc-circular-progress.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-circular-progress.$prefix, tokens: $circular-progress-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-circular-progress-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-circular-progress.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n    $mdc-circular-progress-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/icon' as tokens-mat-icon;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-colors($theme, $palette-name) {\n  $color: inspection.get-theme-color($theme, $palette-name, text);\n  $tokens: tokens-mat-icon.private-get-icon-color-tokens($color);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-icon.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: primary, secondary, tertiary, or error\n///     (If not specified, default neutral color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon.$prefix,\n        tokens-mat-icon.get-color-tokens($theme));\n    }\n\n    .mat-icon {\n      &.mat-primary {\n        @include _palette-colors($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-colors($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-colors($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {}\n}\n\n/// Outputs density theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-icon.$prefix, tokens: tokens-mat-icon.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: surface, primary, secondary, tertiary,\n///     or error (If not specified, default surface color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-icon-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $mat-icon-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/stepper' as tokens-mat-stepper;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for mat-stepper.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-color-tokens($theme));\n\n      .mat-step-header.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-step-header.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-stepper.$prefix, tokens: tokens-mat-stepper.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin theme($theme,  $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mat-stepper-tokens: token-utils.get-tokens-for(\n      $tokens,\n      tokens-mat-stepper.$prefix,\n      $options...\n    );\n    @include token-utils.create-token-values(\n        tokens-mat-stepper.$prefix, $mat-stepper-tokens);\n  }\n}\n", "// Custom Theming for Angular Material\n// For more information: https://material.angular.io/guide/theming\n@use '@angular/material' as mat;\n@use \"palette-def\" as p;\n@use \"variables\";\n@use 'sass:map';\n@use 'theme-helper';\n\n$bg-color: map.get(p.$primary-colors, 990);\n\n\n// Plus imports for other components in your app.\n\n\n// Include the common styles for Angular Material. We include this here so that you only\n// have to load a single css file for Angular Material in your app.\n// Be sure that you only ever include this mixin once!\n// TODO(v15): As of v15 mat.core no longer includes default typography styles.\n//  The following line adds:\n//    1. Default typography styles for all components\n//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)\n//  If you specify typography styles for the components you use elsewhere, you should delete this line.\n//  If you don't need the default component typographies but still want the hierarchy styles,\n//  you can delete this line and instead use:\n//    `@include mat.typography-hierarchy(mat.define-typography-config());`\n@include mat.all-component-typographies();\n@include mat.core();\n\n\n// Define the palettes for your theme using the Material Design palettes available in palette.scss\n// (imported above). For each palette, you can optionally specify a default, lighter, and darker\n// hue. Available color palettes: https://material.io/design/color/\n$primary-palette: mat.m2-define-palette(p.$primary-colors, 600);\n$secondary-palette: mat.m2-define-palette(p.$secondary-colors, 600);\n$tertiary-palette: mat.m2-define-palette(p.$tertiary-colors, 600);\n\n// The warn palette is optional (defaults to red).\n$error-palette: mat.m2-define-palette(p.$error-colors);\n$neutral-palette: mat.m2-define-palette(p.$neutral-colors);\n$neutral-variant-palette: mat.m2-define-palette(p.$neutral-variant-colors);\n\n// Create the theme object. A theme consists of configurations for individual\n// theming systems such as \"color\" or \"typography\".\n$light-theme: mat.m2-define-light-theme((\n  color: (\n    primary: $primary-palette,\n    accent: $tertiary-palette,\n    warn: $error-palette,\n  ),\n  density: -1\n));\n\n$dark-theme: mat.m2-define-dark-theme((\n  color: (\n    primary: mat.m2-define-palette(p.$primary-colors, 200),\n    accent: mat.m2-define-palette(p.$tertiary-colors, 200),\n    warn: mat.m2-define-palette(p.$error-colors, 200),\n  )\n));\n\n$palettes: (\n  primary-palette: $primary-palette,\n  secondary-palette: $secondary-palette,\n  tertiary-palette: $tertiary-palette,\n  error-palette: $error-palette,\n  neutral-palette: $neutral-palette,\n  neutral-variant-palette: $neutral-variant-palette\n);\n\n// Include theme styles for core and each component used in your app.\n// Alternatively, you can import and @include the theme mixins for each component\n// that you are using.\n//@include mat.all-component-themes($light-theme);\n\n@include mat.core-theme($light-theme);\n@include mat.card-theme($light-theme);\n@include mat.progress-bar-theme($light-theme);\n@include mat.tooltip-theme($light-theme);\n@include mat.form-field-theme($light-theme);\n@include mat.input-theme($light-theme);\n@include mat.select-theme($light-theme);\n@include mat.dialog-theme($light-theme);\n@include mat.slide-toggle-theme($light-theme);\n@include mat.checkbox-theme($light-theme);\n@include mat.button-theme($light-theme);\n@include mat.icon-button-theme($light-theme);\n@include mat.fab-theme($light-theme);\n@include mat.snack-bar-theme($light-theme);\n@include mat.progress-spinner-theme($light-theme);\n@include mat.divider-theme($light-theme);\n@include mat.expansion-theme($light-theme);\n@include mat.icon-theme($light-theme);\n@include mat.stepper-theme($light-theme);\n@include mat.menu-theme($light-theme);\n\n\n//@include nested-stepper.theme($light-theme);\n$bg-color: map.get(p.$primary-colors, 010);\n\n$color-config: mat.m2-get-color-config($light-theme);\n\n\n\n// Apply the dark theme only when the user prefers dark themes.\n.dark {\n  // Use the `-color` mixins to only apply color styles without reapplying the same\n  // typography and density styles.\n  $bg-color: map.get(p.$primary-colors, 950);\n\n  $dark-theme: theme-helper.modify-background($dark-theme, p.$dark-theme-background-palette-redef);\n  $dark-theme: theme-helper.modify-foreground($dark-theme, p.$dark-theme-foreground-palette-redef);\n\n  $color-config: mat.m2-get-color-config($dark-theme);\n  @include mat.all-component-colors($dark-theme);\n\n  @include mat.core-color($dark-theme);\n  @include mat.card-color($dark-theme);\n  @include mat.progress-bar-color($dark-theme);\n  @include mat.tooltip-color($dark-theme);\n  @include mat.form-field-color($dark-theme);\n  @include mat.input-color($dark-theme);\n  @include mat.select-color($dark-theme);\n  @include mat.dialog-color($dark-theme);\n  @include mat.slide-toggle-color($dark-theme);\n  @include mat.checkbox-color($dark-theme);\n  @include mat.button-color($dark-theme);\n  @include mat.icon-button-color($dark-theme);\n  @include mat.fab-color($dark-theme);\n  @include mat.snack-bar-color($dark-theme);\n  @include mat.progress-spinner-color($dark-theme);\n  @include mat.divider-color($dark-theme);\n  @include mat.expansion-color($dark-theme);\n  @include mat.icon-color($dark-theme);\n  @include mat.stepper-color($dark-theme);\n  @include mat.menu-color($dark-theme);\n\n}\n\n@include variables.theme($palettes);\n\n\n\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mat/radio' as tokens-mat-radio;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-radio.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    .mat-mdc-radio-button {\n      &.mat-primary {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme, primary));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, primary));\n      }\n\n      &.mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme));\n      }\n\n      &.mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mdc-radio.$prefix,\n      tokens: tokens-mdc-radio.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mat-radio.$prefix,\n      tokens: tokens-mat-radio.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-radio.$prefix, $options...);\n  $mat-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mat-radio.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-radio.$prefix, $mdc-radio-tokens);\n  @include token-utils.create-token-values(tokens-mat-radio.$prefix, $mat-radio-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/slider' as tokens-mat-slider;\n@use '../core/tokens/m2/mdc/slider' as tokens-mdc-slider;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slider.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n        tokens-mat-slider.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n        tokens-mat-slider.get-color-tokens($theme));\n\n      .mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n          tokens-mdc-slider.private-get-color-palette-color-tokens($theme, accent));\n        @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n          tokens-mdc-slider.private-get-color-palette-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n\n/// Outputs typography theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-typography-tokens($theme));\n    }\n  }\n}\n\n\n/// Outputs density theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-slider.$prefix, tokens: tokens-mat-slider.get-token-slots()),\n    (prefix: tokens-mdc-slider.$prefix, tokens: tokens-mdc-slider.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-slider.$prefix, $options...);\n  $mat-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mat-slider.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-slider.$prefix, $mdc-slider-tokens);\n  @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-slider-tokens);\n}\n", "@use 'sass:color';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/badge' as tokens-mat-badge;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-badge.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-color-tokens($theme));\n    }\n\n    .mat-badge-accent {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-badge-warn {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-badge.$prefix, tokens: tokens-mat-badge.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-badge-tokens: token-utils.get-tokens-for($tokens, tokens-mat-badge.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-badge.$prefix, $mat-badge-tokens);\n}\n", "@use 'sass:color';\n@use 'sass:map';\n@use '../core/tokens/m2/mat/datepicker' as tokens-mat-datepicker;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n@use '../core/typography/typography';\n@use '../button/icon-button-theme';\n\n// TODO(crisbeto): these variables aren't used anymore and should be removed.\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _calendar-color($theme, $palette-name) {\n  $palette-color: inspection.get-theme-color($theme, $palette-name);\n  $range-color: tokens-mat-datepicker.private-get-range-background-color($palette-color);\n  $range-tokens: tokens-mat-datepicker.get-range-color-tokens($range-color);\n  $calendar-tokens:\n    tokens-mat-datepicker.private-get-calendar-color-palette-color-tokens($theme, $palette-name);\n\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n    map.merge($calendar-tokens, $range-tokens));\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-datepicker.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-color-tokens($theme));\n    }\n\n    .mat-datepicker-content {\n      &.mat-accent {\n        @include _calendar-color($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _calendar-color($theme, warn);\n      }\n    }\n\n    .mat-datepicker-toggle-active {\n      &.mat-accent {\n        $accent-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, accent);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $accent-tokens);\n      }\n\n      &.mat-warn {\n        $warn-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, warn);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $warn-tokens);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: tokens-mat-datepicker.$private-default-comparison-color,\n  $overlap-color: tokens-mat-datepicker.$private-default-overlap-color,\n  $overlap-selected-color:\n    tokens-mat-datepicker.private-get-default-overlap-selected-color($overlap-color)) {\n  $tokens: tokens-mat-datepicker.get-range-color-tokens(\n    $range-color: $range-color,\n    $comparison-color: $comparison-color,\n    $overlap-color: $overlap-color,\n    $overlap-selected-color: $overlap-selected-color,\n  );\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $tokens);\n  }\n}\n\n/// Outputs density theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // TODO(crisbeto): move this into the structural styles\n    // once the icon button density is switched to tokens.\n\n    // Regardless of the user-passed density, we want the calendar\n    // previous/next buttons to remain at density -2\n    .mat-calendar-controls {\n      @include icon-button-theme.density(-2);\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-datepicker.$prefix, tokens: tokens-mat-datepicker.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-datepicker-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-datepicker.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $mat-datepicker-tokens);\n}\n", "@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/toolbar' as tokens-mat-toolbar;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mat-toolbar.$prefix,\n    tokens-mat-toolbar.private-get-color-palette-color-tokens(\n      $background-color: inspection.get-theme-color($theme, $palette-name),\n      $text-color: inspection.get-theme-color($theme, $palette-name, default-contrast)\n    )\n  );\n}\n\n@mixin base($theme) {}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-color-tokens($theme));\n    }\n\n    .mat-toolbar {\n      &.mat-primary {\n        @include _palette-styles($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // TODO(mmalerba): Stop calling this and resolve resulting screen diffs.\n    $theme: inspection.private-get-typography-back-compat-theme($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-toolbar.$prefix, tokens: tokens-mat-toolbar.get-token-slots()),\n  );\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      map.get($tokens, tokens-mat-toolbar.$prefix));\n  }\n}\n", "@use \"@angular/material\" as mat;\n@use \"sass:map\";\n\n@mixin theme($palettes) {\n  $primary-palette: map.get($palettes, 'primary-palette');\n  $secondary-palette: map.get($palettes, 'secondary-palette');\n  $tertiary-palette: map.get($palettes, 'tertiary-palette');\n  $error-palette: map.get($palettes, 'error-palette');\n  $neutral-palette: map.get($palettes, 'neutral-palette');\n  $neutral-variant-palette: map.get($palettes, 'neutral-variant-palette');\n\n\n  $primary: mat.m2-get-color-from-palette($primary-palette, 600);\n  $surface: mat.m2-get-color-from-palette($neutral-palette, 010);\n  :root {\n    --primary: #{$primary};\n    --on-primary: #{mat.m2-get-color-from-palette($primary-palette, 002)};\n    --primary-container: #{mat.m2-get-color-from-palette($primary-palette, 100)};\n    --on-primary-container: #{mat.m2-get-color-from-palette($primary-palette, 900)};\n\n    --secondary: #{ mat.m2-get-color-from-palette($secondary-palette, 600)};\n    --on-secondary: #{mat.m2-get-color-from-palette($secondary-palette, 002)};\n    --secondary-container: #{ mat.m2-get-color-from-palette($secondary-palette, 100)};\n    --on-secondary-container: #{ mat.m2-get-color-from-palette($secondary-palette, 900)};\n\n    --tertiary: #{mat.m2-get-color-from-palette($tertiary-palette, 600)};\n    --on-tertiary: #{mat.m2-get-color-from-palette($tertiary-palette, 002)};\n    --tertiary-container: #{ mat.m2-get-color-from-palette($tertiary-palette, 100)};\n    --on-tertiary-container: #{ mat.m2-get-color-from-palette($tertiary-palette, 900)};\n\n    --error: #{mat.m2-get-color-from-palette($error-palette, 600)};\n    --on-error: #{mat.m2-get-color-from-palette($error-palette, 002)};\n    --error-container: #{ mat.m2-get-color-from-palette($error-palette, 100)};\n    --on-error-container: #{mat.m2-get-color-from-palette($error-palette, 900)};\n\n    --background: #{mat.m2-get-color-from-palette($neutral-palette, 010)};\n    --on-background: #{mat.m2-get-color-from-palette($neutral-palette, 900)};\n    --surface: #{$surface};\n    --on-surface: #{mat.m2-get-color-from-palette($neutral-palette, 900)};\n\n    --surface-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 100)};\n    --on-surface-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 700)};\n    --outline: #{mat.m2-get-color-from-palette($neutral-variant-palette, 500)};\n    --outline-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 200)};\n\n\n    --surface1: #{linear-gradient(0, transparentize($primary, 0.95), transparentize($primary, 0.95)), $surface};\n    --surface2: #{linear-gradient(0, transparentize($primary, 0.92), transparentize($primary, 0.92)), $surface};\n    --surface3: #{linear-gradient(0, transparentize($primary, 0.89), transparentize($primary, 0.89)), $surface};\n    --surface4: #{linear-gradient(0, transparentize($primary, 0.88), transparentize($primary, 0.88)), $surface};\n    --surface5: #{linear-gradient(0, transparentize($primary, 0.86), transparentize($primary, 0.86)), $surface};\n\n    --card: #{mat.m2-get-color-from-palette($neutral-palette, 010)};\n\n    --icon-positive: #0C9509;\n    --hover: rgba(0, 0, 0, 0.04);\n  }\n\n\n  .dark {\n    $primary: mat.m2-get-color-from-palette($primary-palette, 200);\n    $surface: mat.m2-get-color-from-palette($neutral-palette, 900);\n\n\n    --primary: #{$primary};\n    --on-primary: #{mat.m2-get-color-from-palette($primary-palette, 950)};\n    --primary-container: #{mat.m2-get-color-from-palette($primary-palette, 700)};\n    --on-primary-container: #{mat.m2-get-color-from-palette($primary-palette, 100)};\n\n    --secondary: #{mat.m2-get-color-from-palette($secondary-palette, 200)};\n    --on-secondary: #{mat.m2-get-color-from-palette($secondary-palette, 800)};\n    --secondary-container: #{mat.m2-get-color-from-palette($secondary-palette, 700)};\n    --on-secondary-container: #{mat.m2-get-color-from-palette($secondary-palette, 100)};\n\n    --tertiary: #{mat.m2-get-color-from-palette($tertiary-palette, 200)};\n    --on-tertiary: #{mat.m2-get-color-from-palette($tertiary-palette, 950)};\n    --tertiary-container: #{mat.m2-get-color-from-palette($tertiary-palette, 700)};\n    --on-tertiary-container: #{mat.m2-get-color-from-palette($tertiary-palette, 100)};\n\n    --error: #{mat.m2-get-color-from-palette($error-palette, 200)};\n    --on-error: #{mat.m2-get-color-from-palette($error-palette, 800)};\n    --error-container: #{mat.m2-get-color-from-palette($error-palette, 700)};\n    --on-error-container: #{mat.m2-get-color-from-palette($error-palette, 100)};\n\n    --background: #{mat.m2-get-color-from-palette($neutral-palette, 900)};\n    --on-background: #{mat.m2-get-color-from-palette($neutral-palette, 100)};\n    --surface: #{$surface};\n    --on-surface: #{mat.m2-get-color-from-palette($neutral-palette, 100)};\n\n    --surface-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 800)};\n    --on-surface-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 200)};\n    --outline: #{mat.m2-get-color-from-palette($neutral-variant-palette, 400)};\n    --outline-variant: #{mat.m2-get-color-from-palette($neutral-variant-palette, 700)};\n\n    --surface1: #{linear-gradient(0, transparentize($primary, 0.95), transparentize($primary, 0.95)), $surface};\n    --surface2: #{linear-gradient(0, transparentize($primary, 0.92), transparentize($primary, 0.92)), $surface};\n    --surface3: #{linear-gradient(0, transparentize($primary, 0.89), transparentize($primary, 0.89)), $surface};\n    --surface4: #{linear-gradient(0, transparentize($primary, 0.88), transparentize($primary, 0.88)), $surface};\n    --surface5: #{linear-gradient(0, transparentize($primary, 0.86), transparentize($primary, 0.86)), $surface};\n\n    --card: #{mat.m2-get-color-from-palette($neutral-palette, 800)};\n\n    --icon-positive: #51F44D;\n    --hover: rgba(255, 255, 255, 0.04);\n  }\n}\n\n\n\n\n\n\n\n", "@import \"reactome-cytoscape-style\";\n@import \"ngx-reactome-style\";\n\n\nbody {\n  height: 100%;\n  overflow: hidden;\n  background: var(--surface);\n}\n\n\n.palette {\n  //width: 100%;\n  height: 20px;\n  min-width: 100px;\n  margin-right: 20px;\n}\n"],
  "mappings": "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AAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;ADvGJ;ACuGI,uCAAA;AAAA,uCAAA;AAAA,qCAAA;;ADvGJ;ACuGI,uCAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,uCAAA;AAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA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AA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,uCAAA;AAAA,sCAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;ADvGJ;ACuGI,6BAAA;AAAA,8BAAA;AAAA,+BAAA;AAAA,wCAAA;AAAA,0BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,uCAAA;AAAA,uCAAA;AAAA,yCAAA;AAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,mCAAA;AAAA,oCAAA;AAAA,qCAAA;AAAA,8CAAA;AAAA,gCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,6CAAA;AAAA,6CAAA;AAAA,+CAAA;AAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,mDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;AuBjDA,KAAA,CAAA,WAAA,CPpBJ;AhBqEI,6BAAA;AAAA,8BAAA;AAAA,+BAAA;AAAA,0BAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;AuB7CA,KAAA,CAJA,WAIA,CRjDJ;Af8FI,6BAAA;AAAA,8BAAA;AAAA,+BAAA;AAAA,0BAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;AuBzCA,KAAA,CARA,WAQA,CRhDJ;AfyFI,6BAAA;AAAA,8BAAA;AAAA,+BAAA;AAAA,0BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;AuBnCA,KAAA,CAAA,gBAAA,CPlCJ;AhBqEI,mCAAA;AAAA,oCAAA;AAAA,qCAAA;AAAA,gCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;AuB/BA,KAAA,CAJA,gBAIA,CR/DJ;Af8FI,mCAAA;AAAA,oCAAA;AAAA,qCAAA;AAAA,gCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;AuB3BA,KAAA,CARA,gBAQA,CR9DJ;AfyFI,mCAAA;AAAA,oCAAA;AAAA,qCAAA;AAAA,gCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;ADvGJ;ACuGI,kCAAA;AAAA,wCAAA;;ADvGJ;ACuGI,kCAAA;;ADvGJ;ACuGI,kCAAA;AAAA,wCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,gCAAA;;ADvGJ;ACuGI,kDAAA;AAAA,gCAAA;;ADvGJ;ACuGI,kDAAA;;AwB3FF,KAAA,CTHF;Af8FI,kDAAA;;AwBtFF,KAAA,CTHF;AfyFI,kDAAA;;ADvGJ;ACuGI,uBAAA;;ADvGJ;ACuGI,uBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;ADvGJ;ACuGI,mCAAA;AAAA,mDAAA;AAAA,4CAAA;;ADvGJ;ACuGI,8CAAA;AAAA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,oDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;ADvGJ;ACuGI,iDAAA;AAAA,gDAAA;;ADvGJ;ACuGI,oBAAA;;AyBxFF,CAAA,QAAA,CTmBF;AhBqEI,oBAAA;;AyBpFF,CAJA,QAIA,CVVF;Af8FI,oBAAA;;AyBhFF,CARA,QAQA,CVTF;AfyFI,oBAAA;;ADvGJ;ACuGI,8CAAA;AAAA,6DAAA;AAAA,6DAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,iCAAA;AAAA,4BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,qDAAA;AAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,0DAAA;AAAA,0DAAA;;A0B/FF,KAAA,CAAA,eAAA,CXCF;Af8FI,8CAAA;AAAA,6DAAA;AAAA,6DAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;;A0B1FF,KAAA,CALA,eAKA,CXCF;AfyFI,8CAAA;AAAA,6DAAA;AAAA,6DAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;AAAA,yDAAA;;ADvGJ;ACuGI,+BAAA;;ADvGJ;ACuGI,8BAAA;AAAA,qCAAA;AAAA,kCAAA;AAAA,2BAAA;AAAA,6BAAA;AAAA,mCAAA;AAAA,oCAAA;AAAA,6CAAA;AAAA,8CAAA;AAAA,mCAAA;;ADvGJ;ACuGI,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,8BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,8BAAA;AAAA,4BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;;A2BvBR,C7B9FE;AEqHM,sBAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,gDAAA;AAAA,iCAAA;AAAA,wCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,wCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,2CAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,mCAAA;AAAA,kDAAA;AAAA,uDAAA;AAAA,oDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,gEAAA;AAAA,6DAAA;AAAA,2DAAA;AAAA,0DAAA;AAAA,mEAAA;AAAA,8BAAA;AAAA,wBAAA;AAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,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,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,mCAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,uCAAA;AAAA,sCAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,K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,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA;IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA;IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA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",
  "names": []
}
